from abc import ABCMeta, abstractmethod
from typing import Optional

from backend.commons.data_handlers.abstract_handler import CommonDataHandler
from backend.commons.enums.event_type_enums import EventTypeEnum
from backend.commons.events.base import MarketEvent, SignalEvent


class AbstractStrategy(metaclass=ABCMeta):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.
    """

    def __int__(self, data_handler: CommonDataHandler):
        self.data_handler = data_handler

    @abstractmethod
    def calculate_signals(self, market_event: MarketEvent) -> Optional[SignalEvent]:
        """
        Provides the mechanisms to calculate the list of signals.
        """
        if market_event.event_type() != EventTypeEnum.MARKET:
            return None

        raise NotImplementedError()
