#!/usr/bin/python
# -*- coding: utf-8 -*-

# strategy.py

from __future__ import print_function

from abc import ABCMeta, abstractmethod
import datetime

from backend.backtest.datahandler import DataHandler

try:
    import Queue as queue
except ImportError:
    import queue

import numpy as np
import pandas as pd

from backend.backtest.event import SignalEvent, Event


class Strategy(metaclass=ABCMeta):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.
    """
    def __int__(self, data_handler:DataHandler, events_que: queue.Queue[Event]):
        self.data_handler = data_handler
        self.events_que = events_que

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")
